// ========== ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© ==========
let cart = JSON.parse(localStorage.getItem('allaf-cart')) || [];
let isCartOpen = false;
let isAIChatOpen = false;

// ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
const products = [
    {
        id: 1,
        name: 'ŸÉÿ±Ÿàÿßÿ≥ŸàŸÜ ÿ≤ÿ®ÿØÿ©',
        price: 2,
        category: 'bakery',
        image: 'upload/1000100374.jpg',
        description: 'ŸÉÿ±Ÿàÿßÿ≥ŸàŸÜ ÿ∑ÿßÿ≤ÿ¨ ŸàŸÖŸÇÿ±ŸÖÿ¥ ŸÖÿ≠ÿ∂ÿ± ÿ®ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©'
    },
    {
        id: 2,
        name: 'ŸÖÿ≥ŸÖŸÜ ŸÖÿπÿ≥ŸÑ',
        price: 3.5,
        category: 'bakery',
        image: 'upload/1000101444.jpg',
        description: 'ŸÖÿ≥ŸÖŸÜ ÿ™ŸÇŸÑŸäÿØŸä ŸÖÿ≠ÿ∂ÿ± ÿ®ÿßŸÑÿπÿ≥ŸÑ ÿßŸÑÿ∑ÿ®ŸäÿπŸä'
    },
    {
        id: 3,
        name: 'ŸÉŸäŸÉÿ© ÿ¥ŸàŸÉŸàŸÑÿß',
        price: 40,
        category: 'cakes',
        image: 'upload/1000101446.jpg',
        description: 'ŸÉŸäŸÉÿ© ÿ¥ŸàŸÉŸàŸÑÿß ŸÅÿßÿÆÿ±ÿ© ŸÖŸÜÿßÿ≥ÿ®ÿ© ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿßÿ™'
    },
    {
        id: 4,
        name: 'ÿÆÿ®ÿ≤ ÿ®ŸÑÿØŸä',
        price: 1.5,
        category: 'bakery',
        image: 'upload/1000101440.jpg',
        description: 'ÿÆÿ®ÿ≤ ÿ®ŸÑÿØŸä ÿ∑ÿßÿ≤ÿ¨ ŸÖÿ≠ÿ∂ÿ± ŸäŸàŸÖŸäÿßŸã'
    },
    {
        id: 5,
        name: 'ÿ≠ŸÑŸàŸâ ÿßŸÑŸÑŸàÿ≤',
        price: 15,
        category: 'sweets',
        image: 'upload/1000101745.png',
        description: 'ÿ≠ŸÑŸàŸâ ŸÑÿ∞Ÿäÿ∞ÿ© ŸÖÿ≠ÿ∂ÿ±ÿ© ŸÖŸÜ ÿßŸÑŸÑŸàÿ≤ ÿßŸÑÿ∑ÿ®ŸäÿπŸä'
    },
    {
        id: 6,
        name: 'ÿ®ŸÇŸÑÿßŸàÿ©',
        price: 25,
        category: 'sweets',
        image: 'upload/1000101746.jpg',
        description: 'ÿ®ŸÇŸÑÿßŸàÿ© ÿ™ŸÇŸÑŸäÿØŸäÿ© ÿ®ÿßŸÑÿπÿ≥ŸÑ ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™'
    },
    {
        id: 7,
        name: 'ŸÉŸäŸÉ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß',
        price: 35,
        category: 'cakes',
        image: 'upload/9e9bd7c4-e1f9-45e1-9114-9089f22ed6218004096147942632244.jpg',
        description: 'ŸÉŸäŸÉ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸä ÿ®ÿ∑ÿπŸÖ ÿ±ÿßÿ¶ÿπ'
    },
    {
        id: 8,
        name: 'ÿØŸàŸÜÿßÿ™ ŸÖÿ≠ÿ¥Ÿä',
        price: 4,
        category: 'sweets',
        image: 'upload/1000101761.jpg',
        description: 'ÿØŸàŸÜÿßÿ™ ÿ∑ÿ±Ÿä ŸÖÿ≠ÿ¥Ÿä ÿ®ÿßŸÑŸÉÿ±ŸäŸÖÿ©'
    }
];

// ========== ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÖŸàŸÇÿπ ==========
document.addEventListener('DOMContentLoaded', function() {
    initializeWebsite();
});

function initializeWebsite() {
    // ÿ•ÿÆŸÅÿßÿ° ÿ¥ÿßÿ¥ÿ© ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
    setTimeout(() => {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.classList.add('hidden');
        }
    }, 2000);

    // ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™
    initializeNavigation();
    initializeProducts();
    initializeCart();
    initializeAIChat();
    initializeScrollEffects();
    initializeContactForm();
    initializeLazyLoading();
    
    // ÿ™ÿ≠ÿØŸäÿ´ ÿπÿØÿßÿØ ÿßŸÑÿ≥ŸÑÿ©
    updateCartCount();
    
    console.log('üåü ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ŸÖÿÆÿ®ÿ≤ÿ© ÿπŸÑÿßŸÅ! ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸàŸÇÿπ ÿ®ŸÜÿ¨ÿßÿ≠ üë®‚Äçüç≥');
}

// ========== ÿßŸÑÿ™ŸÜŸÇŸÑ ==========
function initializeNavigation() {
    // ÿßŸÑÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑÿ≥ŸÑÿ≥ ŸÑŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿØÿßÿÆŸÑŸäÿ©
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerHeight = document.querySelector('.main-header').offsetHeight;
                const targetPosition = target.offsetTop - headerHeight - 20;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
                
                // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÜÿ¥ÿ∑
                updateActiveNavLink(this.getAttribute('href'));
            }
        });
    });

    // ÿ™ÿ£ÿ´Ÿäÿ± ÿßŸÑŸáŸäÿØÿ± ÿπŸÜÿØ ÿßŸÑÿ™ŸÖÿ±Ÿäÿ±
    window.addEventListener('scroll', function() {
        const header = document.querySelector('.main-header');
        const backToTop = document.getElementById('back-to-top');
        
        if (window.scrollY > 100) {
            header.classList.add('scrolled');
            if (backToTop) backToTop.classList.add('visible');
        } else {
            header.classList.remove('scrolled');
            if (backToTop) backToTop.classList.remove('visible');
        }
        
        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÜÿ¥ÿ∑ ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸàÿ∂ÿπ
        updateActiveNavLinkOnScroll();
    });
}

function updateActiveNavLink(href) {
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    
    const activeLink = document.querySelector(`a[href="${href}"]`);
    if (activeLink) {
        activeLink.classList.add('active');
    }
}

function updateActiveNavLinkOnScroll() {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    let current = '';
    const headerHeight = document.querySelector('.main-header').offsetHeight;
    
    sections.forEach(section => {
        const sectionTop = section.offsetTop - headerHeight - 50;
        const sectionHeight = section.offsetHeight;
        
        if (window.scrollY >= sectionTop && window.scrollY < sectionTop + sectionHeight) {
            current = section.getAttribute('id');
        }
    });
    
    navLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === `#${current}`) {
            link.classList.add('active');
        }
    });
}

function toggleMobileMenu() {
    const navMenu = document.querySelector('.nav-menu');
    const menuToggle = document.querySelector('.menu-toggle');
    
    navMenu.classList.toggle('mobile-open');
    menuToggle.classList.toggle('active');
}

function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

// ========== ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ==========
function initializeProducts() {
    renderProducts();
    initializeProductFilters();
}

function renderProducts(filter = 'all') {
    const productsGrid = document.getElementById('products-grid');
    if (!productsGrid) return;
    
    const filteredProducts = filter === 'all' 
        ? products 
        : products.filter(product => product.category === filter);
    
    productsGrid.innerHTML = filteredProducts.map(product => `
        <div class="featured-card lazy-load" data-category="${product.category}">
            <div class="card-image">
                <img src="${product.image}" alt="${product.name}" loading="lazy">
                <div class="card-overlay">
                    <button class="quick-add-btn" onclick="addToCart('${product.name}', ${product.price}, '${product.image}')">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>
            <div class="card-content">
                <h3 class="card-title">${product.name}</h3>
                <p class="card-description">${product.description}</p>
                <div class="card-price">${product.price} ÿØÿ±ŸáŸÖ</div>
                <button class="add-to-cart-btn" onclick="addToCart('${product.name}', ${product.price}, '${product.image}')">
                    <i class="fas fa-shopping-cart"></i>
                    ÿ£ÿ∂ŸÅ ŸÑŸÑÿ≥ŸÑÿ©
                </button>
            </div>
        </div>
    `).join('');
    
    // ÿ™ÿ∑ÿ®ŸäŸÇ ÿ™ÿ£ÿ´Ÿäÿ± ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ÿØÿ±Ÿäÿ¨Ÿä
    setTimeout(() => {
        document.querySelectorAll('.lazy-load').forEach(element => {
            element.classList.add('loaded');
        });
    }, 100);
}

function initializeProductFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // ÿ•ÿ≤ÿßŸÑÿ© ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÜÿ¥ÿ∑ÿ© ŸÖŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ±
            filterButtons.forEach(btn => btn.classList.remove('active'));
            
            // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÜÿ¥ÿ∑ÿ© ŸÑŸÑÿ≤ÿ± ÿßŸÑŸÖÿ≠ÿØÿØ
            this.classList.add('active');
            
            // ÿ™ÿµŸÅŸäÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
            const filter = this.getAttribute('data-filter');
            renderProducts(filter);
        });
    });
}

// ========== ÿßŸÑÿ≥ŸÑÿ© ==========
function initializeCart() {
    renderCart();
    updateCartCount();
}

function addToCart(name, price, image) {
    const existingItem = cart.find(item => item.name === name);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            name: name,
            price: price,
            image: image,
            quantity: 1
        });
    }
    
    saveCart();
    updateCartCount();
    renderCart();
    
    // ÿ™ÿ£ÿ´Ÿäÿ± ÿ®ÿµÿ±Ÿä ŸÑŸÑÿ•ÿ∂ÿßŸÅÿ©
    showAddToCartAnimation();
    
    // ŸÅÿ™ÿ≠ ÿßŸÑÿ≥ŸÑÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
    if (!isCartOpen) {
        toggleCart();
    }
}

function removeFromCart(name) {
    cart = cart.filter(item => item.name !== name);
    saveCart();
    updateCartCount();
    renderCart();
}

function updateQuantity(name, change) {
    const item = cart.find(item => item.name === name);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(name);
        } else {
            saveCart();
            updateCartCount();
            renderCart();
        }
    }
}

function renderCart() {
    const cartItems = document.getElementById('cart-items');
    const cartEmpty = document.getElementById('cart-empty');
    const cartTotal = document.getElementById('cart-total');
    
    if (!cartItems) return;
    
    if (cart.length === 0) {
        cartItems.style.display = 'none';
        if (cartEmpty) cartEmpty.style.display = 'block';
        if (cartTotal) cartTotal.textContent = '0 ÿØÿ±ŸáŸÖ';
        return;
    }
    
    cartItems.style.display = 'block';
    if (cartEmpty) cartEmpty.style.display = 'none';
    
    cartItems.innerHTML = cart.map(item => `
        <div class="cart-item fade-in">
            <img src="${item.image}" alt="${item.name}" class="cart-item-image">
            <div class="cart-item-details">
                <div class="cart-item-name">${item.name}</div>
                <div class="cart-item-price">${item.price} ÿØÿ±ŸáŸÖ</div>
            </div>
            <div class="cart-item-controls">
                <button class="quantity-btn" onclick="updateQuantity('${item.name}', -1)">
                    <i class="fas fa-minus"></i>
                </button>
                <span class="quantity-display">${item.quantity}</span>
                <button class="quantity-btn" onclick="updateQuantity('${item.name}', 1)">
                    <i class="fas fa-plus"></i>
                </button>
                <button class="remove-item" onclick="removeFromCart('${item.name}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
    
    // ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ¨ŸÖŸàÿπ
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    if (cartTotal) cartTotal.textContent = `${total} ÿØÿ±ŸáŸÖ`;
}

function updateCartCount() {
    const cartCount = document.querySelector('.cart-count');
    if (cartCount) {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        cartCount.textContent = totalItems;
        
        // ÿ™ÿ£ÿ´Ÿäÿ± ÿ®ÿµÿ±Ÿä ŸÑŸÑÿπÿØÿßÿØ
        if (totalItems > 0) {
            cartCount.classList.add('pulse');
            setTimeout(() => cartCount.classList.remove('pulse'), 1000);
        }
    }
}

function toggleCart() {
    const cartSidebar = document.getElementById('cart-sidebar');
    if (!cartSidebar) return;
    
    isCartOpen = !isCartOpen;
    
    if (isCartOpen) {
        cartSidebar.classList.add('open');
        document.body.style.overflow = 'hidden';
    } else {
        cartSidebar.classList.remove('open');
        document.body.style.overflow = '';
    }
}

function saveCart() {
    localStorage.setItem('allaf-cart', JSON.stringify(cart));
}

function checkout() {
    if (cart.length === 0) {
        alert('ÿßŸÑÿ≥ŸÑÿ© ŸÅÿßÿ±ÿ∫ÿ©! ÿ£ÿ∂ŸÅ ÿ®ÿπÿ∂ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ£ŸàŸÑÿßŸã.');
        return;
    }
    
    const orderDetails = cart.map((item, index) => 
        `${index + 1}. ${item.name} √ó ${item.quantity} = ${item.price * item.quantity} ÿØÿ±ŸáŸÖ`
    ).join('\n');
    
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    const message = `üßæ *ÿ∑ŸÑÿ® ÿ¨ÿØŸäÿØ ŸÖŸÜ ŸÖÿÆÿ®ÿ≤ÿ© ÿπŸÑÿßŸÅ*\n\n${orderDetails}\n\nüí∞ *ÿßŸÑŸÖÿ¨ŸÖŸàÿπ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä:* ${total} ÿØÿ±ŸáŸÖ\n\nüì¶ ÿ¥ŸÉÿ±ÿßŸã ŸÑÿßÿÆÿ™Ÿäÿßÿ±ŸÉŸÖ ŸÖÿÆÿ®ÿ≤ÿ© ÿπŸÑÿßŸÅ!\nüïê ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ≠ÿ∂Ÿäÿ± ÿ∑ŸÑÿ®ŸÉŸÖ ŸÅŸä ÿ£ŸÇÿ±ÿ® ŸàŸÇÿ™ ŸÖŸÖŸÉŸÜ.`;
    
    const phone = "212681848262";
    const whatsappUrl = `https://wa.me/${phone}?text=${encodeURIComponent(message)}`;
    
    window.open(whatsappUrl, '_blank');
    
    // ÿ•ŸÅÿ±ÿßÿ∫ ÿßŸÑÿ≥ŸÑÿ© ÿ®ÿπÿØ ÿßŸÑÿ∑ŸÑÿ®
    cart = [];
    saveCart();
    updateCartCount();
    renderCart();
    toggleCart();
}

function showAddToCartAnimation() {
    // ÿ•ŸÜÿ¥ÿßÿ° ÿ™ÿ£ÿ´Ÿäÿ± ÿ®ÿµÿ±Ÿä ŸÑŸÑÿ•ÿ∂ÿßŸÅÿ© ŸÑŸÑÿ≥ŸÑÿ©
    const cartBtn = document.querySelector('.cart-btn');
    if (cartBtn) {
        cartBtn.style.transform = 'scale(1.2)';
        cartBtn.style.background = 'var(--accent-color)';
        
        setTimeout(() => {
            cartBtn.style.transform = '';
            cartBtn.style.background = '';
        }, 300);
    }
}

// ========== ÿ®Ÿàÿ™ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ==========
function initializeAIChat() {
    const chatInput = document.getElementById('chat-input-field');
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }
}

function toggleAIChat() {
    const aiChat = document.getElementById('ai-chat');
    if (!aiChat) return;
    
    isAIChatOpen = !isAIChatOpen;
    
    if (isAIChatOpen) {
        aiChat.classList.add('open');
    } else {
        aiChat.classList.remove('open');
    }
}

function sendMessage() {
    const chatInput = document.getElementById('chat-input-field');
    const message = chatInput.value.trim();
    
    if (!message) return;
    
    // ÿ•ÿ∂ÿßŸÅÿ© ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    addMessageToChat(message, 'user');
    
    // ŸÖÿ≥ÿ≠ ÿ≠ŸÇŸÑ ÿßŸÑÿ•ÿØÿÆÿßŸÑ
    chatInput.value = '';
    
    // ŸÖÿ≠ÿßŸÉÿßÿ© ÿ±ÿØ ÿßŸÑÿ®Ÿàÿ™
    setTimeout(() => {
        const botResponse = generateBotResponse(message);
        addMessageToChat(botResponse, 'bot');
    }, 1000);
}

function askAI(question) {
    const chatInput = document.getElementById('chat-input-field');
    chatInput.value = question;
    sendMessage();
}

function addMessageToChat(message, sender) {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;
    
    const messageElement = document.createElement('div');
    messageElement.className = `message ${sender}-message fade-in`;
    
    const avatar = sender === 'bot' 
        ? '<i class="fas fa-robot"></i>' 
        : '<i class="fas fa-user"></i>';
    
    messageElement.innerHTML = `
        <div class="message-avatar">${avatar}</div>
        <div class="message-content">
            <p>${message}</p>
        </div>
    `;
    
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function generateBotResponse(userMessage) {
    const message = userMessage.toLowerCase();
    
    // ÿ±ÿØŸàÿØ ÿ∞ŸÉŸäÿ© ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©
    if (message.includes('ŸÖŸÜÿ™ÿ¨ÿßÿ™') || message.includes('ŸÖŸÖŸäÿ≤ÿ©')) {
        return 'ŸÖŸÜÿ™ÿ¨ÿßÿ™ŸÜÿß ÿßŸÑŸÖŸÖŸäÿ≤ÿ© ÿ™ÿ¥ŸÖŸÑ ÿßŸÑŸÉÿ±Ÿàÿßÿ≥ŸàŸÜ ÿßŸÑÿ∑ÿßÿ≤ÿ¨ÿå ÿßŸÑŸÖÿ≥ŸÖŸÜ ÿßŸÑŸÖÿπÿ≥ŸÑÿå ŸàŸÉŸäŸÉÿßÿ™ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿß ÿßŸÑŸÅÿßÿÆÿ±ÿ©. ÿ¨ŸÖŸäÿπŸáÿß ŸÖÿ≠ÿ∂ÿ±ÿ© ŸäŸàŸÖŸäÿßŸã ÿ®ÿ£ÿ¨ŸàÿØ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©! ü•êüç∞';
    }
    
    if (message.includes('ÿ∑ŸÑÿ®') || message.includes('ŸÉŸäŸÅ')) {
        return 'ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ∑ŸÑÿ® ÿ®ÿ≥ŸáŸàŸÑÿ©! ÿ£ÿ∂ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ±ŸäÿØŸáÿß ÿ•ŸÑŸâ ÿßŸÑÿ≥ŸÑÿ©ÿå ÿ´ŸÖ ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ "ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ®" Ÿàÿ≥Ÿäÿ™ŸÖ ÿ™Ÿàÿ¨ŸäŸáŸÉ ŸÑŸàÿßÿ™ÿ≥ÿßÿ® ŸÑÿ•ŸÉŸÖÿßŸÑ ÿßŸÑÿ∑ŸÑÿ®. üì±‚ú®';
    }
    
    if (message.includes('ÿ£ÿ≥ÿπÿßÿ±') || message.includes('ÿ≥ÿπÿ±')) {
        return 'ÿ£ÿ≥ÿπÿßÿ±ŸÜÿß ÿ™ŸÜÿßŸÅÿ≥Ÿäÿ© ÿ¨ÿØÿßŸã! ÿßŸÑŸÉÿ±Ÿàÿßÿ≥ŸàŸÜ ÿ®ŸÄ2 ÿØÿ±ŸáŸÖÿå ÿßŸÑŸÖÿ≥ŸÖŸÜ ÿ®ŸÄ3.5 ÿØÿ±ŸáŸÖÿå ŸàÿßŸÑŸÉŸäŸÉ Ÿäÿ®ÿØÿ£ ŸÖŸÜ 35 ÿØÿ±ŸáŸÖ. ÿ¨ŸàÿØÿ© ÿπÿßŸÑŸäÿ© ÿ®ÿ£ÿ≥ÿπÿßÿ± ŸÖÿπŸÇŸàŸÑÿ©! üí∞';
    }
    
    if (message.includes('ÿ≥ÿßÿπÿßÿ™') || message.includes('ŸàŸÇÿ™') || message.includes('ŸÖÿ™Ÿâ')) {
        return 'ŸÜÿ≠ŸÜ ŸÖŸÅÿ™Ÿàÿ≠ŸàŸÜ ŸäŸàŸÖŸäÿßŸã ŸÖŸÜ ÿßŸÑÿ≥ÿßÿπÿ© 6:00 ÿµÿ®ÿßÿ≠ÿßŸã ÿ≠ÿ™Ÿâ 10:00 ŸÖÿ≥ÿßÿ°Ÿã. ŸÜÿπŸÖŸÑ ÿ∑ŸàÿßŸÑ ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπ ŸÑÿÆÿØŸÖÿ™ŸÉŸÖ! üïê';
    }
    
    if (message.includes('ŸÖŸàŸÇÿπ') || message.includes('ÿπŸÜŸàÿßŸÜ') || message.includes('ÿ£ŸäŸÜ')) {
        return 'ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖŸàŸÇÿπŸÜÿß ÿ®ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿ±ÿßÿ®ÿ∑ "ŸÖŸàŸÇÿπŸÜÿß ÿπŸÑŸâ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ©" ŸÅŸä ÿßŸÑŸÖŸàŸÇÿπ. ŸÜÿ≠ŸÜ ŸÅŸä ÿßŸÜÿ™ÿ∏ÿßÿ±ŸÉŸÖ! üìç';
    }
    
    if (message.includes('ÿ¥ŸÉÿ±') || message.includes('ŸÖŸÖÿ™ÿßÿ≤') || message.includes('ÿ±ÿßÿ¶ÿπ')) {
        return 'ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉ! ŸÜÿ≠ŸÜ ÿ≥ÿπÿØÿßÿ° ÿ®ÿÆÿØŸÖÿ™ŸÉ. ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÑÿØŸäŸÉ ÿ£Ÿä ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ± ÿ¢ÿÆÿ±ÿå ŸÑÿß ÿ™ÿ™ÿ±ÿØÿØ ŸÅŸä ÿßŸÑÿ≥ÿ§ÿßŸÑ! üòä';
    }
    
    if (message.includes('ŸÖÿ≥ÿßÿπÿØÿ©') || message.includes('ŸÖÿ¥ŸÉŸÑÿ©')) {
        return 'ÿ®ÿßŸÑÿ∑ÿ®ÿπ! ÿ£ŸÜÿß ŸáŸÜÿß ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ. ŸäŸÖŸÉŸÜŸÉ ÿ≥ÿ§ÿßŸÑŸä ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ÿå ÿßŸÑÿ£ÿ≥ÿπÿßÿ±ÿå ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ∑ŸÑÿ®ÿå ÿ£Ÿà ÿ£Ÿä ÿ¥Ÿäÿ° ÿ¢ÿÆÿ± ÿ™ÿ±ŸäÿØ ŸÖÿπÿ±ŸÅÿ™Ÿá ÿπŸÜ ŸÖÿÆÿ®ÿ≤ÿ© ÿπŸÑÿßŸÅ! ü§ù';
    }
    
    // ÿ±ÿØ ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
    return 'ÿ¥ŸÉÿ±ÿßŸã ŸÑÿ±ÿ≥ÿßŸÑÿ™ŸÉ! ÿ£ŸÜÿß ÿ≥ÿßÿ±ÿ©ÿå ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ŸÖÿÆÿ®ÿ≤ÿ© ÿπŸÑÿßŸÅ. ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ŸÖÿπÿ±ŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ÿå ÿßŸÑÿ£ÿ≥ÿπÿßÿ±ÿå Ÿàÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ∑ŸÑÿ®. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü üåü';
}

// ========== ÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™ ÿßŸÑÿ™ŸÖÿ±Ÿäÿ± ==========
function initializeScrollEffects() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('slide-up');
            }
        });
    }, observerOptions);
    
    // ŸÖÿ±ÿßŸÇÿ®ÿ© ÿßŸÑÿπŸÜÿßÿµÿ± ŸÑŸÑÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™
    document.querySelectorAll('.featured-card, .feature-item, .contact-item').forEach(el => {
        observer.observe(el);
    });
}

// ========== ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ™ÿØÿ±Ÿäÿ¨Ÿä ==========
function initializeLazyLoading() {
    const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src || img.src;
                img.classList.add('loaded');
                imageObserver.unobserve(img);
            }
        });
    });
    
    document.querySelectorAll('img[loading="lazy"]').forEach(img => {
        imageObserver.observe(img);
    });
}

// ========== ŸÜŸÖŸàÿ∞ÿ¨ ÿßŸÑÿ™ŸàÿßÿµŸÑ ==========
function initializeContactForm() {
    const contactForm = document.getElementById('contact-form');
    if (!contactForm) return;
    
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const name = formData.get('name');
        const phone = formData.get('phone');
        const message = formData.get('message');
        
        if (!name || !phone || !message) {
            alert('Ÿäÿ±ÿ¨Ÿâ ŸÖŸÑÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©');
            return;
        }
        
        // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿπÿ®ÿ± Ÿàÿßÿ™ÿ≥ÿßÿ®
        const whatsappMessage = `üåü *ÿ±ÿ≥ÿßŸÑÿ© ÿ¨ÿØŸäÿØÿ© ŸÖŸÜ ŸÖŸàŸÇÿπ ŸÖÿÆÿ®ÿ≤ÿ© ÿπŸÑÿßŸÅ*\n\nüë§ *ÿßŸÑÿßÿ≥ŸÖ:* ${name}\nüì± *ÿßŸÑŸáÿßÿ™ŸÅ:* ${phone}\nüí¨ *ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©:*\n${message}\n\nüìÖ *ÿßŸÑÿ™ÿßÿ±ŸäÿÆ:* ${new Date().toLocaleDateString('ar-SA')}`;
        
        const whatsappUrl = `https://wa.me/212681848262?text=${encodeURIComponent(whatsappMessage)}`;
        window.open(whatsappUrl, '_blank');
        
        // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨
        this.reset();
        
        // ÿ±ÿ≥ÿßŸÑÿ© ÿ™ÿ£ŸÉŸäÿØ
        alert('ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉ! ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠. ÿ≥ŸÜÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÉ ŸÇÿ±Ÿäÿ®ÿßŸã.');
    });
}

// ========== Ÿàÿ∏ÿßÿ¶ŸÅ ŸÖÿ≥ÿßÿπÿØÿ© ==========
function formatPrice(price) {
    return `${price} ÿØÿ±ŸáŸÖ`;
}

function formatDate(date) {
    return new Date(date).toLocaleDateString('ar-SA');
}

function showNotification(message, type = 'success') {
    // ÿ•ŸÜÿ¥ÿßÿ° ÿ•ÿ¥ÿπÿßÿ± ŸÖÿ§ŸÇÿ™
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? 'var(--accent-color)' : '#e74c3c'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        box-shadow: var(--shadow-lg);
        z-index: 10000;
        animation: slideInRight 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

// ========== ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ==========
window.addEventListener('error', function(e) {
    console.error('ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸÖŸàŸÇÿπ:', e.error);
});

// ========== ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿ£ÿØÿßÿ° ==========
// ÿ™ÿ£ÿ¨ŸäŸÑ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸàÿßÿ±ÿØ ÿ∫Ÿäÿ± ÿßŸÑÿ∂ÿ±Ÿàÿ±Ÿäÿ©
window.addEventListener('load', function() {
    // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿÆÿ∑Ÿàÿ∑ ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ©
    const fontLink = document.createElement('link');
    fontLink.href = 'https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap';
    fontLink.rel = 'stylesheet';
    document.head.appendChild(fontLink);
});

// ========== PWA Support ==========
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('/sw.js')
            .then(function(registration) {
                console.log('Service Worker registered successfully');
            })
            .catch(function(error) {
                console.log('Service Worker registration failed');
            });
    });
}

// ========== ÿ™ÿµÿØŸäÿ± ÿßŸÑŸàÿ∏ÿßÿ¶ŸÅ ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿπÿßŸÖ ==========
window.addToCart = addToCart;
window.removeFromCart = removeFromCart;
window.updateQuantity = updateQuantity;
window.toggleCart = toggleCart;
window.checkout = checkout;
window.toggleAIChat = toggleAIChat;
window.sendMessage = sendMessage;
window.askAI = askAI;
window.toggleMobileMenu = toggleMobileMenu;
window.scrollToTop = scrollToTop;

